package cmd

import (
	_ "embed"
	"fmt"
	"os"
	"strings"
	"time"

	"github.com/rs/zerolog"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
	"github.com/spf13/viper"

	"github.com/smartcontractkit/cre-cli/cmd/account"
	"github.com/smartcontractkit/cre-cli/cmd/client"
	"github.com/smartcontractkit/cre-cli/cmd/creinit"
	generatebindings "github.com/smartcontractkit/cre-cli/cmd/generate-bindings"
	"github.com/smartcontractkit/cre-cli/cmd/login"
	"github.com/smartcontractkit/cre-cli/cmd/logout"
	"github.com/smartcontractkit/cre-cli/cmd/secrets"
	"github.com/smartcontractkit/cre-cli/cmd/update"
	"github.com/smartcontractkit/cre-cli/cmd/version"
	"github.com/smartcontractkit/cre-cli/cmd/whoami"
	"github.com/smartcontractkit/cre-cli/cmd/workflow"
	"github.com/smartcontractkit/cre-cli/internal/constants"
	"github.com/smartcontractkit/cre-cli/internal/context"
	"github.com/smartcontractkit/cre-cli/internal/logger"
	"github.com/smartcontractkit/cre-cli/internal/runtime"
	"github.com/smartcontractkit/cre-cli/internal/settings"
	"github.com/smartcontractkit/cre-cli/internal/telemetry"
	intupdate "github.com/smartcontractkit/cre-cli/internal/update"
)

//go:embed template/help_template.tpl
var helpTemplate string

var (
	// RootCmd represents the base command when called without any subcommands
	RootCmd = newRootCommand()

	runtimeContextForTelemetry *runtime.Context
	executingCommand           *cobra.Command
	executingArgs              []string
)

func Execute() {
	err := RootCmd.Execute()

	exitCode := 0
	if err != nil {
		exitCode = 1
	}

	if executingCommand != nil && runtimeContextForTelemetry != nil {
		telemetry.EmitCommandEvent(executingCommand, executingArgs, exitCode, runtimeContextForTelemetry, err)
		time.Sleep(200 * time.Millisecond)
	}

	os.Exit(exitCode)
}

func newRootCommand() *cobra.Command {
	rootLogger := createLogger()
	rootViper := createViper()
	runtimeContext := runtime.NewContext(rootLogger, rootViper)

	runtimeContextForTelemetry = runtimeContext

	// By defining a Run func, we force PersistentPreRunE to execute
	// even when 'cre', 'workflow', etc is called with no subcommand
	// this enables to check for update and display if needed
	helpRunE := func(cmd *cobra.Command, args []string) error {
		err := cmd.Help()
		if err != nil {
			return fmt.Errorf("fail to show help: %w", err)
		}
		return nil
	}

	rootCmd := &cobra.Command{
		Use:   "cre",
		Short: "CRE CLI tool",
		Long:  `A command line tool for building, testing and managing Chainlink Runtime Environment (CRE) workflows.`,
		// remove autogenerated string that contains this comment: "Auto generated by spf13/cobra on DD-Mon-YYYY"
		// timestamps can cause docs to keep regenerating on each new PR for no good reason
		DisableAutoGenTag: true,
		// this will be inherited by all submodules and all their commands

		RunE: helpRunE,

		PersistentPreRunE: func(cmd *cobra.Command, args []string) error {
			executingCommand = cmd
			executingArgs = args

			log := runtimeContext.Logger
			v := runtimeContext.Viper

			// add binding for all existing command flags via Viper
			// this step has to run first because flags have higher precedence over configuration parameters and defaults values
			if err := v.BindPFlags(cmd.Flags()); err != nil {
				return fmt.Errorf("failed to bind flags: %w", err)
			}

			// Update log level if verbose flag is set
			if verbose := v.GetBool(settings.Flags.Verbose.Name); verbose {
				newLogger := log.Level(zerolog.DebugLevel)
				if _, found := os.LookupEnv("SETH_LOG_LEVEL"); !found {
					os.Setenv("SETH_LOG_LEVEL", "debug")
				}
				runtimeContext.Logger = &newLogger
				runtimeContext.ClientFactory = client.NewFactory(&newLogger, v)
			}

			err := runtimeContext.AttachEnvironmentSet()
			if err != nil {
				return fmt.Errorf("failed to load environment details: %w", err)
			}

			if isLoadCredentials(cmd) {
				skipValidation := shouldSkipValidation(cmd)
				err := runtimeContext.AttachCredentials(cmd.Context(), skipValidation)
				if err != nil {
					return fmt.Errorf("authentication required: %w", err)
				}
			}

			// load settings from yaml files
			if isLoadSettings(cmd) {
				// Set execution context (project root + workflow directory if applicable)
				projectRootFlag := runtimeContext.Viper.GetString(settings.Flags.ProjectRoot.Name)
				if err := context.SetExecutionContext(cmd, args, projectRootFlag, rootLogger); err != nil {
					return err
				}

				err := runtimeContext.AttachSettings(cmd)
				if err != nil {
					return fmt.Errorf("%w", err)
				}
			}

			return nil
		},

		PersistentPostRun: func(cmd *cobra.Command, args []string) {

			// Check for updates *sequentially* after the main command has run.
			// This guarantees it prints at the end, after all other output.
			if shouldCheckForUpdates(cmd) {
				intupdate.CheckForUpdates(version.Version, runtimeContext.Logger)
			}
		},
	}

	cobra.AddTemplateFunc("wrappedFlagUsages", func(fs *pflag.FlagSet) string {
		// 100 = wrap width
		return strings.TrimRight(fs.FlagUsagesWrapped(100), "\n")
	})

	cobra.AddTemplateFunc("hasUngrouped", func(c *cobra.Command) bool {
		for _, cmd := range c.Commands() {
			if cmd.IsAvailableCommand() && !cmd.Hidden && cmd.GroupID == "" {
				return true
			}
		}
		return false
	})

	rootCmd.SetHelpTemplate(helpTemplate)

	// Definition of global flags:
	// env file flag is present for every subcommand
	rootCmd.PersistentFlags().StringP(
		settings.Flags.CliEnvFile.Name,
		settings.Flags.CliEnvFile.Short,
		constants.DefaultEnvFileName,
		fmt.Sprintf("Path to %s file which contains sensitive info", constants.DefaultEnvFileName),
	)
	// project root path flag is present for every subcommand
	rootCmd.PersistentFlags().StringP(
		settings.Flags.ProjectRoot.Name,
		settings.Flags.ProjectRoot.Short,
		"",
		"Path to the project root",
	)
	// verbose flag is present in every subcommand
	rootCmd.PersistentFlags().BoolP(
		settings.Flags.Verbose.Name,
		settings.Flags.Verbose.Short,
		false,
		"Run command in VERBOSE mode",
	)
	// target settings is present in every subcommand
	rootCmd.PersistentFlags().StringP(
		settings.Flags.Target.Name,
		settings.Flags.Target.Short,
		"",
		"Use target settings from YAML config",
	)
	rootCmd.CompletionOptions.HiddenDefaultCmd = true

	secretsCmd := secrets.New(runtimeContext)
	workflowCmd := workflow.New(runtimeContext)
	versionCmd := version.New(runtimeContext)
	loginCmd := login.New(runtimeContext)
	logoutCmd := logout.New(runtimeContext)
	initCmd := creinit.New(runtimeContext)
	genBindingsCmd := generatebindings.New(runtimeContext)
	accountCmd := account.New(runtimeContext)
	whoamiCmd := whoami.New(runtimeContext)
	updateCmd := update.New(runtimeContext)

	secretsCmd.RunE = helpRunE
	workflowCmd.RunE = helpRunE
	accountCmd.RunE = helpRunE

	// Define groups (order controls display order)
	rootCmd.AddGroup(&cobra.Group{ID: "getting-started", Title: "Getting Started"})
	rootCmd.AddGroup(&cobra.Group{ID: "account", Title: "Account"})
	rootCmd.AddGroup(&cobra.Group{ID: "workflow", Title: "Workflow"})
	rootCmd.AddGroup(&cobra.Group{ID: "secret", Title: "Secret"})

	initCmd.GroupID = "getting-started"

	loginCmd.GroupID = "account"
	logoutCmd.GroupID = "account"
	accountCmd.GroupID = "account"
	whoamiCmd.GroupID = "account"

	secretsCmd.GroupID = "secret"
	workflowCmd.GroupID = "workflow"

	rootCmd.AddCommand(
		initCmd,
		versionCmd,
		loginCmd,
		logoutCmd,
		accountCmd,
		whoamiCmd,
		secretsCmd,
		workflowCmd,
		genBindingsCmd,
		updateCmd,
	)

	return rootCmd
}

func isLoadSettings(cmd *cobra.Command) bool {
	// It is not expected to have the settings file when running the following commands
	var excludedCommands = map[string]struct{}{
		"cre version":               {},
		"cre login":                 {},
		"cre logout":                {},
		"cre whoami":                {},
		"cre account list-key":      {},
		"cre init":                  {},
		"cre generate-bindings":     {},
		"cre completion bash":       {},
		"cre completion fish":       {},
		"cre completion powershell": {},
		"cre completion zsh":        {},
		"cre help":                  {},
		"cre update":                {},
		"cre workflow":              {},
		"cre account":               {},
		"cre secrets":               {},
		"cre":                       {},
	}

	_, exists := excludedCommands[cmd.CommandPath()]
	return !exists
}

func isLoadCredentials(cmd *cobra.Command) bool {
	// It is not expected to have the credentials loaded when running the following commands
	var excludedCommands = map[string]struct{}{
		"cre version":               {},
		"cre login":                 {},
		"cre completion bash":       {},
		"cre completion fish":       {},
		"cre completion powershell": {},
		"cre completion zsh":        {},
		"cre help":                  {},
		"cre generate-bindings":     {},
		"cre update":                {},
		"cre workflow":              {},
		"cre account":               {},
		"cre secrets":               {},
		"cre":                       {},
	}

	_, exists := excludedCommands[cmd.CommandPath()]
	return !exists
}

func shouldSkipValidation(cmd *cobra.Command) bool {
	var excludedCommands = map[string]struct{}{
		"cre logout": {},
	}

	_, exists := excludedCommands[cmd.CommandPath()]
	return exists
}

func shouldCheckForUpdates(cmd *cobra.Command) bool {
	var excludedCommands = map[string]struct{}{
		"bash":       {},
		"zsh":        {},
		"fish":       {},
		"powershell": {},
		"update":     {},
	}

	_, exists := excludedCommands[cmd.Name()]
	return !exists
}

func createLogger() *zerolog.Logger {
	// Set default Seth log level if not set
	if _, found := os.LookupEnv("SETH_LOG_LEVEL"); !found {
		os.Setenv("SETH_LOG_LEVEL", constants.DefaultSethLogLevel)
	}

	return logger.NewConsoleLogger()
}

func createViper() *viper.Viper {
	return viper.New() //nolint:forbidigo
}
