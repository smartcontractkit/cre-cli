package generator

import (
	"encoding/json"
	"fmt"

	. "github.com/dave/jennifer/jen"
	"github.com/gagliardetto/anchor-go/tools"
)

// genfile_constructor generates the file `constructor.go`.
func (g *Generator) genfile_constructor() (*OutputFile, error) {
	file := NewFile(g.options.Package)
	file.HeaderComment("Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.")
	file.HeaderComment("This file contains the constructor for the program.")

	{
		code := newStatement()
		// type
		code.Type().Id(tools.ToCamelUpper(g.options.Package)).Struct(
			Id("IdlTypes").Op("*").Qual(PkgAnchorIdlCodec, "IdlTypeDefSlice"),
			Id("client").Op("*").Qual(PkgSolanaCre, "Client"),
		)
		code.Line()
		file.Add(code)
		code.Line()

		// idl string
		code = newStatement()
		idlData, err := json.Marshal(g.idl)
		if err != nil {
			return nil, fmt.Errorf("error reading IDL file: %w", err)
		}
		code.Var().Id("IDL").Op("=").Lit(string(idlData))
		file.Add(code)
		code.Line()

		// new constructor
		code = newStatement()
		code.Func().
			Id("New"+tools.ToCamelUpper(g.options.Package)).
			Params(
				Id("client").Op("*").Qual(PkgSolanaCre, "Client"),
			).
			Params(
				Op("*").Id(tools.ToCamelUpper(g.options.Package)), Error(),
			).
			Block(
				Id("idlTypes").Op(":=").Qual(PkgAnchorIdlCodec, "IdlTypeDefSlice"),
				Id("err").Op(":=").Qual(PkgJson, "Unmarshal").Call(
					Index().Byte().Parens(Id("IDL")),
					Id("idlTypes"),
				),
				If(Err().Op("!=").Nil()).Block(
					Return(Nil(), Err()),
				),
				Return(
					Op("&").Id(tools.ToCamelUpper(g.options.Package)).Values(Dict{
						Id("IdlTypes"): Id("idlTypes"),
						Id("client"):   Id("client"),
					}),
					Nil(),
				),
			)
		file.Add(code)
		code.Line()
	}

	return &OutputFile{
		Name: "constructor.go",
		File: file,
	}, nil
}
