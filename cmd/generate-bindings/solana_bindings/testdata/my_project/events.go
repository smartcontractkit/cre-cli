// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the events defined in the IDL.

package my_project

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanatypes "github.com/smartcontractkit/cre-cli/cmd/generate-bindings/solana_bindings/cre-sdk-go/types"
)

func ParseAnyEvent(eventData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek event discriminator: %w", err)
	}
	switch discriminator {
	case Event_AccessLogged:
		value := new(AccessLogged)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as AccessLogged: %w", err)
		}
		return value, nil
	case Event_DataUpdated:
		value := new(DataUpdated)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as DataUpdated: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseEvent_AccessLogged(eventData []byte) (*AccessLogged, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_AccessLogged {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_AccessLogged, binary.FormatDiscriminator(discriminator))
	}
	event := new(AccessLogged)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type AccessLogged: %w", err)
	}
	return event, nil
}

func ParseEvent_DataUpdated(eventData []byte) (*DataUpdated, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_DataUpdated {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_DataUpdated, binary.FormatDiscriminator(discriminator))
	}
	event := new(DataUpdated)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type DataUpdated: %w", err)
	}
	return event, nil
}

func DecodeEvent_DataUpdated(event solanatypes.Log) (*DataUpdated, error) {
	res, err := ParseEvent_DataUpdated(event.Data)
	if err != nil {
		return nil, err
	}
	return res, nil
}

func DecodeEvent_AccessLogged(event solanatypes.Log) (*AccessLogged, error) {
	res, err := ParseEvent_AccessLogged(event.Data)
	if err != nil {
		return nil, err
	}
	return res, nil
}

/*

	var codecIDL codec.IDL
	if err := json.Unmarshal([]byte(filterConfig.idl), &codecIDL); err != nil {
		return fmt.Errorf("unexpected error: invalid CCIP OffRamp IDL, error: %w", err)
	}

	eventIdl, err := extractEventIDL(eventName, codecIDL)
	if err != nil {
		return fmt.Errorf("failed to extract event IDL: %w", err)
	}


func toLPFilter(
	name string,
	conf config.PollingFilter,
	subKeyPaths [][]string,
	eventIdl codec.EventIDLTypes,
) logpollertypes.Filter {
	return logpollertypes.Filter{
		EventName:       name,
		EventSig:        logpollertypes.NewEventSignatureFromName(name),
		StartingBlock:   conf.GetStartingBlock(),
		EventIdl:        logpollertypes.EventIdl(eventIdl),
		SubkeyPaths:     subKeyPaths,
		Retention:       conf.GetRetention(),
		MaxLogsKept:     conf.GetMaxLogsKept(),
		IncludeReverted: conf.GetIncludeReverted(),
	}
}

type FilterLogTriggerRequest struct {
	Address       lptypes.PublicKey
	EventName     string
	EventSig      lptypes.EventSignature
	EventIdl      lptypes.EventIdl
	SubkeyPaths   [][]string
	SubkeyFilters []SubkeyFilterCriteria
}

type SubkeyFilterCriteria struct {
	SubkeyIndex uint64                       
	Comparers   []primitives.ValueComparator 
}

*/