// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the events defined in the IDL.

package my_project

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
)

func ParseAnyEvent(eventData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek event discriminator: %w", err)
	}
	switch discriminator {
	case Event_AccessLogged:
		value := new(AccessLogged)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as AccessLogged: %w", err)
		}
		return value, nil
	case Event_DataUpdated:
		value := new(DataUpdated)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as DataUpdated: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseEvent_AccessLogged(eventData []byte) (*AccessLogged, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_AccessLogged {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_AccessLogged, binary.FormatDiscriminator(discriminator))
	}
	event := new(AccessLogged)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type AccessLogged: %w", err)
	}
	return event, nil
}

func ParseEvent_DataUpdated(eventData []byte) (*DataUpdated, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_DataUpdated {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_DataUpdated, binary.FormatDiscriminator(discriminator))
	}
	event := new(DataUpdated)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type DataUpdated: %w", err)
	}
	return event, nil
}
