// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package my_project

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	sdk "github.com/smartcontractkit/chainlink-protos/cre/go/sdk"
	solana "github.com/smartcontractkit/cre-cli/cmd/generate-bindings/solana_bindings/cre-sdk-go/capabilities/blockchain/solana"
	cre "github.com/smartcontractkit/cre-sdk-go/cre"
)

type AccessLogged struct {
	Caller  solanago.PublicKey `json:"caller"`
	Message string             `json:"message"`
}

func (obj AccessLogged) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Caller`:
	err = encoder.Encode(obj.Caller)
	if err != nil {
		return errors.NewField("Caller", err)
	}
	// Serialize `Message`:
	err = encoder.Encode(obj.Message)
	if err != nil {
		return errors.NewField("Message", err)
	}
	return nil
}

func (obj AccessLogged) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding AccessLogged: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *AccessLogged) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Caller`:
	err = decoder.Decode(&obj.Caller)
	if err != nil {
		return errors.NewField("Caller", err)
	}
	// Deserialize `Message`:
	err = decoder.Decode(&obj.Message)
	if err != nil {
		return errors.NewField("Message", err)
	}
	return nil
}

func (obj *AccessLogged) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling AccessLogged: %w", err)
	}
	return nil
}

func UnmarshalAccessLogged(buf []byte) (*AccessLogged, error) {
	obj := new(AccessLogged)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *MyProject) WriteReportFromAccessLogged(runtime cre.Runtime, input AccessLogged) cre.Promise[*solana.WriteReportReply] {
	encoded, err := input.Marshal()
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}

	promise := runtime.GenerateReport(&sdk.ReportRequest{
		EncodedPayload: encoded,
		EncoderName:    "solana",
		HashingAlgo:    "sha256",
		SigningAlgo:    "ed25519",
	})

	return cre.ThenPromise(promise, func(report *cre.Report) cre.Promise[*solana.WriteReportReply] {
		return c.client.WriteReport(runtime, &solana.WriteCreReportRequest{
			Receiver: ProgramID.Bytes(),
			Report:   report,
		})
	})
}

type DataAccount struct {
	Data  string       `json:"data"`
	Data2 DataAccount2 `json:"data2"`
}

func (obj DataAccount) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Data`:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return errors.NewField("Data", err)
	}
	// Serialize `Data2`:
	err = encoder.Encode(obj.Data2)
	if err != nil {
		return errors.NewField("Data2", err)
	}
	return nil
}

func (obj DataAccount) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DataAccount: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DataAccount) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return errors.NewField("Data", err)
	}
	// Deserialize `Data2`:
	err = decoder.Decode(&obj.Data2)
	if err != nil {
		return errors.NewField("Data2", err)
	}
	return nil
}

func (obj *DataAccount) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DataAccount: %w", err)
	}
	return nil
}

func UnmarshalDataAccount(buf []byte) (*DataAccount, error) {
	obj := new(DataAccount)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *MyProject) WriteReportFromDataAccount(runtime cre.Runtime, input DataAccount) cre.Promise[*solana.WriteReportReply] {
	encoded, err := input.Marshal()
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}

	promise := runtime.GenerateReport(&sdk.ReportRequest{
		EncodedPayload: encoded,
		EncoderName:    "solana",
		HashingAlgo:    "sha256",
		SigningAlgo:    "ed25519",
	})

	return cre.ThenPromise(promise, func(report *cre.Report) cre.Promise[*solana.WriteReportReply] {
		return c.client.WriteReport(runtime, &solana.WriteCreReportRequest{
			Receiver: ProgramID.Bytes(),
			Report:   report,
		})
	})
}

type DataAccount2 struct {
	Data2 string `json:"data2"`
}

func (obj DataAccount2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Data2`:
	err = encoder.Encode(obj.Data2)
	if err != nil {
		return errors.NewField("Data2", err)
	}
	return nil
}

func (obj DataAccount2) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DataAccount2: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DataAccount2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Data2`:
	err = decoder.Decode(&obj.Data2)
	if err != nil {
		return errors.NewField("Data2", err)
	}
	return nil
}

func (obj *DataAccount2) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DataAccount2: %w", err)
	}
	return nil
}

func UnmarshalDataAccount2(buf []byte) (*DataAccount2, error) {
	obj := new(DataAccount2)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *MyProject) WriteReportFromDataAccount2(runtime cre.Runtime, input DataAccount2) cre.Promise[*solana.WriteReportReply] {
	encoded, err := input.Marshal()
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}

	promise := runtime.GenerateReport(&sdk.ReportRequest{
		EncodedPayload: encoded,
		EncoderName:    "solana",
		HashingAlgo:    "sha256",
		SigningAlgo:    "ed25519",
	})

	return cre.ThenPromise(promise, func(report *cre.Report) cre.Promise[*solana.WriteReportReply] {
		return c.client.WriteReport(runtime, &solana.WriteCreReportRequest{
			Receiver: ProgramID.Bytes(),
			Report:   report,
		})
	})
}

type DataUpdated struct {
	Sender solanago.PublicKey `json:"sender"`
	Value  string             `json:"value"`
}

func (obj DataUpdated) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Sender`:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return errors.NewField("Sender", err)
	}
	// Serialize `Value`:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj DataUpdated) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DataUpdated: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DataUpdated) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return errors.NewField("Sender", err)
	}
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj *DataUpdated) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DataUpdated: %w", err)
	}
	return nil
}

func UnmarshalDataUpdated(buf []byte) (*DataUpdated, error) {
	obj := new(DataUpdated)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *MyProject) WriteReportFromDataUpdated(runtime cre.Runtime, input DataUpdated) cre.Promise[*solana.WriteReportReply] {
	encoded, err := input.Marshal()
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}

	promise := runtime.GenerateReport(&sdk.ReportRequest{
		EncodedPayload: encoded,
		EncoderName:    "solana",
		HashingAlgo:    "sha256",
		SigningAlgo:    "ed25519",
	})

	return cre.ThenPromise(promise, func(report *cre.Report) cre.Promise[*solana.WriteReportReply] {
		return c.client.WriteReport(runtime, &solana.WriteCreReportRequest{
			Receiver: ProgramID.Bytes(),
			Report:   report,
		})
	})
}
