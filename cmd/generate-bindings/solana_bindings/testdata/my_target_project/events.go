// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the events defined in the IDL.

package my_project

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
	types "github.com/smartcontractkit/cre-cli/cmd/generate-bindings/solana_bindings/cre-sdk-go/types"
	// solanago "github.com/gagliardetto/solana-go"
	// sdk "github.com/smartcontractkit/chainlink-protos/cre/go/sdk"
	// solanatypes "github.com/smartcontractkit/cre-cli/cmd/generate-bindings/solana_bindings/cre-sdk-go/types"

	solana "github.com/smartcontractkit/cre-cli/cmd/generate-bindings/solana_bindings/cre-sdk-go/capabilities/blockchain/solana"
	cre "github.com/smartcontractkit/cre-sdk-go/cre"
	bindings "github.com/smartcontractkit/cre-cli/cmd/generate-bindings/solana_bindings/cre-sdk-go/capabilities/blockchain/solana/bindings"
	// anchoridlrepo "github.com/gagliardetto/anchor-go/idl"
	// anchoridlcodec "github.com/smartcontractkit/cre-cli/cmd/generate-bindings/solana_bindings/cre-sdk-go/codec"

)

func ParseAnyEvent(eventData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek event discriminator: %w", err)
	}
	switch discriminator {
	case Event_AccessLogged:
		value := new(AccessLogged)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as AccessLogged: %w", err)
		}
		return value, nil
	case Event_DataUpdated:
		value := new(DataUpdated)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as DataUpdated: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseEvent_AccessLogged(eventData []byte) (*AccessLogged, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_AccessLogged {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_AccessLogged, binary.FormatDiscriminator(discriminator))
	}
	event := new(AccessLogged)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type AccessLogged: %w", err)
	}
	return event, nil
}

func DecodeEvent_AccessLogged(event types.Log) (*AccessLogged, error) {
	res, err := ParseEvent_AccessLogged(event.Data)
	if err != nil {
		return nil, err
	}
	return res, nil
}

func ParseEvent_DataUpdated(eventData []byte) (*DataUpdated, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_DataUpdated {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_DataUpdated, binary.FormatDiscriminator(discriminator))
	}
	event := new(DataUpdated)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type DataUpdated: %w", err)
	}
	return event, nil
}

func DecodeEvent_DataUpdated(event *solana.Log) (*DataUpdated, error) {
	res, err := ParseEvent_DataUpdated(event.Data)
	if err != nil {
		return nil, err
	}
	return res, nil
}

type DataUpdated struct {
	Data  string       `json:"data"`
	Data2 DataAccount2 `json:"data2"`
}

type DataAccount2 struct {
	Data2 string `json:"data2"`
}


type DataUpdatedTrigger struct {
	cre.Trigger[*solana.Log, *solana.Log] // Embed the raw trigger
}

// Adapt method that decodes the log into AccessLogged data
func (t *DataUpdatedTrigger) Adapt(l *solana.Log) (*bindings.DecodedLog[DataUpdated], error) {
	// Decode the log using the contract's codec
	decoded, err := DecodeEvent_DataUpdated(l)
	if err != nil {
		return nil, err
	}

	return &bindings.DecodedLog[DataUpdated]{
		Log:  l,
		Data: *decoded,
	}, nil
}

func (c *MyProject) LogTrigger_DataUpdated(
	chainSelector uint64, 
	subKeyPathAndValue []solana.SubKeyPathAndFilter
) (cre.Trigger[*solana.Log, *bindings.DecodedLog[DataUpdated]], error) {
	if len(subKeyPathAndValue) > 4 {
		return nil, fmt.Errorf("too many subkey path and value pairs: %d", len(subKeyPathAndValue))
	}

	subKeyPaths, subKeyFilters, err := bindings.ValidateSubKeyPathAndValueExactNoPtr[DataUpdated](subKeyPathAndValue)
	if err != nil {
		return nil, fmt.Errorf("failed to validate subkey path and value: %w", err)
	}

	eventIdl := types.GetIdlEvent(c.IdlTypes, "DataUpdated")

	rawTrigger := solana.LogTrigger(chainSelector, &solana.FilterLogTriggerRequest{
		Address:       types.PublicKey(ProgramID),
		EventName:     "DataUpdated",
		EventSig:      Event_DataUpdated,
		EventIdl:      eventIdl,
		SubkeyPaths:   subKeyPaths,
		SubkeyFilters: subKeyFilters,
	})

	return &DataUpdatedTrigger{
		Trigger: rawTrigger,
	}, nil
}

