// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the accounts defined in the IDL.

package data_storage

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	pb "github.com/smartcontractkit/chainlink-protos/cre/go/values/pb"
	solana "github.com/smartcontractkit/cre-cli/cmd/generate-bindings/solana_bindings/cre-sdk-go/capabilities/blockchain/solana"
	types "github.com/smartcontractkit/cre-cli/cmd/generate-bindings/solana_bindings/cre-sdk-go/types"
	cre "github.com/smartcontractkit/cre-sdk-go/cre"
	"math/big"
)

func ParseAnyAccount(accountData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek account discriminator: %w", err)
	}
	switch discriminator {
	case Account_DataAccount:
		value := new(DataAccount)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as DataAccount: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseAccount_DataAccount(accountData []byte) (*DataAccount, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_DataAccount {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_DataAccount, binary.FormatDiscriminator(discriminator))
	}
	acc := new(DataAccount)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type DataAccount: %w", err)
	}
	return acc, nil
}

func (c *DataStorage) ReadAccount_DataAccount(
	runtime cre.Runtime,
	accountAddress solanago.PublicKey,
	blockNumber *big.Int,
) cre.Promise[*DataAccount] {
	// cre account read
	bn := cre.PromiseFromResult(pb.NewBigIntFromInt(blockNumber), nil)
	promise := cre.ThenPromise(bn, func(bn *pb.BigInt) cre.Promise[*solana.ReadAccountReply] {
		return c.client.ReadAccount(runtime, &solana.ReadAccountRequest{
			BlockNumber: bn,
			Call:        &solana.ReadAccountMsg{AccountAddress: types.PublicKey(accountAddress)},
		})
	})
	return cre.Then(promise, func(response *solana.ReadAccountReply) (*DataAccount, error) {
		return ParseAccount_DataAccount(response.Data)
	})
}
