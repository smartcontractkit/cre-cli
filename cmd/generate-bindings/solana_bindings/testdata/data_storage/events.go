// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the events defined in the IDL.

package data_storage

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
	solana "github.com/smartcontractkit/cre-cli/cmd/generate-bindings/solana_bindings/cre-sdk-go/capabilities/blockchain/solana"
	bindings "github.com/smartcontractkit/cre-cli/cmd/generate-bindings/solana_bindings/cre-sdk-go/capabilities/blockchain/solana/bindings"
	types "github.com/smartcontractkit/cre-cli/cmd/generate-bindings/solana_bindings/cre-sdk-go/types"
	cre "github.com/smartcontractkit/cre-sdk-go/cre"
)

func ParseAnyEvent(eventData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek event discriminator: %w", err)
	}
	switch discriminator {
	case Event_AccessLogged:
		value := new(AccessLogged)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as AccessLogged: %w", err)
		}
		return value, nil
	case Event_DynamicEvent:
		value := new(DynamicEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as DynamicEvent: %w", err)
		}
		return value, nil
	case Event_NoFields:
		value := new(NoFields)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as NoFields: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseEvent_AccessLogged(eventData []byte) (*AccessLogged, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_AccessLogged {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_AccessLogged, binary.FormatDiscriminator(discriminator))
	}
	event := new(AccessLogged)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type AccessLogged: %w", err)
	}
	return event, nil
}

func (c *Codec) DecodeAccessLogged(event solana.Log) (*AccessLogged, error) {
	res, err := ParseEvent_AccessLogged(event.Data)
	if err != nil {
		return nil, err
	}
	return res, nil
}

type AccessLoggedTrigger struct {
	cre.Trigger[*solana.Log, *solana.Log]
	contract *DataStorage
}

func (t *AccessLoggedTrigger) Adapt(l *solana.Log) (*bindings.DecodedLog[AccessLogged], error) {
	decoded, err := t.contract.Codec.DecodeAccessLogged(l)
	if err != nil {
		return nil, err
	}
	return &bindings.DecodedLog[AccessLogged]{
		Data: *decoded,
		Log:  l,
	}, nil
}

func (c *DataStorage) LogTrigger_AccessLogged(chainSelector uint64, subKeyPathAndValue []solana.SubKeyPathAndFilter) (cre.Trigger[*solana.Log, *bindings.DecodedLog[AccessLogged]], error) {
	eventIdl, err := types.GetIdlEvent(c.IdlTypes, "AccessLogged")
	if err != nil {
		return nil, err
	}
	if len(subKeyPathAndValue) > 4 {
		return nil, fmt.Errorf("too many subkey path and value pairs: %d", len(subKeyPathAndValue))
	}
	subKeyPaths, subKeyFilters, err := bindings.ValidateSubKeyPathAndValue[AccessLogged](subKeyPathAndValue)
	if err != nil {
		return nil, fmt.Errorf("failed to validate subkey path and value: %w", err)
	}
	rawTrigger := solana.LogTrigger(chainSelector, &solana.FilterLogTriggerRequest{
		Address:       types.PublicKey(ProgramID),
		EventIdl:      eventIdl,
		EventName:     "AccessLogged",
		EventSig:      Event_AccessLogged,
		SubkeyFilters: subKeyFilters,
		SubkeyPaths:   subKeyPaths,
	})
	return &AccessLoggedTrigger{Trigger: rawTrigger}, nil
}

func ParseEvent_DynamicEvent(eventData []byte) (*DynamicEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_DynamicEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_DynamicEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(DynamicEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type DynamicEvent: %w", err)
	}
	return event, nil
}

func (c *Codec) DecodeDynamicEvent(event solana.Log) (*DynamicEvent, error) {
	res, err := ParseEvent_DynamicEvent(event.Data)
	if err != nil {
		return nil, err
	}
	return res, nil
}

type DynamicEventTrigger struct {
	cre.Trigger[*solana.Log, *solana.Log]
	contract *DataStorage
}

func (t *DynamicEventTrigger) Adapt(l *solana.Log) (*bindings.DecodedLog[DynamicEvent], error) {
	decoded, err := t.contract.Codec.DecodeDynamicEvent(l)
	if err != nil {
		return nil, err
	}
	return &bindings.DecodedLog[DynamicEvent]{
		Data: *decoded,
		Log:  l,
	}, nil
}

func (c *DataStorage) LogTrigger_DynamicEvent(chainSelector uint64, subKeyPathAndValue []solana.SubKeyPathAndFilter) (cre.Trigger[*solana.Log, *bindings.DecodedLog[DynamicEvent]], error) {
	eventIdl, err := types.GetIdlEvent(c.IdlTypes, "DynamicEvent")
	if err != nil {
		return nil, err
	}
	if len(subKeyPathAndValue) > 4 {
		return nil, fmt.Errorf("too many subkey path and value pairs: %d", len(subKeyPathAndValue))
	}
	subKeyPaths, subKeyFilters, err := bindings.ValidateSubKeyPathAndValue[DynamicEvent](subKeyPathAndValue)
	if err != nil {
		return nil, fmt.Errorf("failed to validate subkey path and value: %w", err)
	}
	rawTrigger := solana.LogTrigger(chainSelector, &solana.FilterLogTriggerRequest{
		Address:       types.PublicKey(ProgramID),
		EventIdl:      eventIdl,
		EventName:     "DynamicEvent",
		EventSig:      Event_DynamicEvent,
		SubkeyFilters: subKeyFilters,
		SubkeyPaths:   subKeyPaths,
	})
	return &DynamicEventTrigger{Trigger: rawTrigger}, nil
}

func ParseEvent_NoFields(eventData []byte) (*NoFields, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_NoFields {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_NoFields, binary.FormatDiscriminator(discriminator))
	}
	event := new(NoFields)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type NoFields: %w", err)
	}
	return event, nil
}

func (c *Codec) DecodeNoFields(event solana.Log) (*NoFields, error) {
	res, err := ParseEvent_NoFields(event.Data)
	if err != nil {
		return nil, err
	}
	return res, nil
}

type NoFieldsTrigger struct {
	cre.Trigger[*solana.Log, *solana.Log]
	contract *DataStorage
}

func (t *NoFieldsTrigger) Adapt(l *solana.Log) (*bindings.DecodedLog[NoFields], error) {
	decoded, err := t.contract.Codec.DecodeNoFields(l)
	if err != nil {
		return nil, err
	}
	return &bindings.DecodedLog[NoFields]{
		Data: *decoded,
		Log:  l,
	}, nil
}

func (c *DataStorage) LogTrigger_NoFields(chainSelector uint64, subKeyPathAndValue []solana.SubKeyPathAndFilter) (cre.Trigger[*solana.Log, *bindings.DecodedLog[NoFields]], error) {
	eventIdl, err := types.GetIdlEvent(c.IdlTypes, "NoFields")
	if err != nil {
		return nil, err
	}
	if len(subKeyPathAndValue) > 4 {
		return nil, fmt.Errorf("too many subkey path and value pairs: %d", len(subKeyPathAndValue))
	}
	subKeyPaths, subKeyFilters, err := bindings.ValidateSubKeyPathAndValue[NoFields](subKeyPathAndValue)
	if err != nil {
		return nil, fmt.Errorf("failed to validate subkey path and value: %w", err)
	}
	rawTrigger := solana.LogTrigger(chainSelector, &solana.FilterLogTriggerRequest{
		Address:       types.PublicKey(ProgramID),
		EventIdl:      eventIdl,
		EventName:     "NoFields",
		EventSig:      Event_NoFields,
		SubkeyFilters: subKeyFilters,
		SubkeyPaths:   subKeyPaths,
	})
	return &NoFieldsTrigger{Trigger: rawTrigger}, nil
}
