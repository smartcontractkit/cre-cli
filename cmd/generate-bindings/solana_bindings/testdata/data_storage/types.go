// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package data_storage

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	sdk "github.com/smartcontractkit/chainlink-protos/cre/go/sdk"
	solana "github.com/smartcontractkit/cre-cli/cmd/generate-bindings/solana_bindings/cre-sdk-go/capabilities/blockchain/solana"
	cre "github.com/smartcontractkit/cre-sdk-go/cre"
)

type AccessLogged struct {
	Caller  solanago.PublicKey `json:"caller"`
	Message string             `json:"message"`
}

func (obj AccessLogged) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Caller`:
	err = encoder.Encode(obj.Caller)
	if err != nil {
		return errors.NewField("Caller", err)
	}
	// Serialize `Message`:
	err = encoder.Encode(obj.Message)
	if err != nil {
		return errors.NewField("Message", err)
	}
	return nil
}

func (obj AccessLogged) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding AccessLogged: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *AccessLogged) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Caller`:
	err = decoder.Decode(&obj.Caller)
	if err != nil {
		return errors.NewField("Caller", err)
	}
	// Deserialize `Message`:
	err = decoder.Decode(&obj.Message)
	if err != nil {
		return errors.NewField("Message", err)
	}
	return nil
}

func (obj *AccessLogged) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling AccessLogged: %w", err)
	}
	return nil
}

func UnmarshalAccessLogged(buf []byte) (*AccessLogged, error) {
	obj := new(AccessLogged)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *Codec) EncodeAccessLoggedStruct(in AccessLogged) ([]byte, error) {
	return in.Marshal()
}

func (c *DataStorage) WriteReportFromAccessLogged(
	runtime cre.Runtime,
	input AccessLogged,
	accountList []solanago.PublicKey,
) cre.Promise[*solana.WriteReportReply] {
	encodedInput, err := c.Codec.EncodeAccessLoggedStruct(input)
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}

	encodedAccountList, err := EncodeAccountList(accountList)
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}

	fwdReport := ForwarderReport{
		AccountHash: encodedAccountList,
		Payload:     encodedInput,
	}

	encodedFwdReport, err := fwdReport.Marshal()
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}
	promise := runtime.GenerateReport(&sdk.ReportRequest{
		EncodedPayload: encodedFwdReport,
		EncoderName:    "solana",
		HashingAlgo:    "sha256",
		SigningAlgo:    "ed25519",
	})

	typedAccountList := make([]solana.PublicKey, len(accountList))
	for i, account := range accountList {
		typedAccountList[i] = solana.PublicKey(account)
	}
	return cre.ThenPromise(promise, func(report *cre.Report) cre.Promise[*solana.WriteReportReply] {
		return c.client.WriteReport(runtime, &solana.WriteCreReportRequest{
			AccountList: typedAccountList,
			Receiver:    ProgramID.Bytes(),
			Report:      report,
		})
	})
}

type DataAccount struct {
	Sender string `json:"sender"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

func (obj DataAccount) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Sender`:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return errors.NewField("Sender", err)
	}
	// Serialize `Key`:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return errors.NewField("Key", err)
	}
	// Serialize `Value`:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj DataAccount) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DataAccount: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DataAccount) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return errors.NewField("Sender", err)
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return errors.NewField("Key", err)
	}
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj *DataAccount) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DataAccount: %w", err)
	}
	return nil
}

func UnmarshalDataAccount(buf []byte) (*DataAccount, error) {
	obj := new(DataAccount)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *Codec) EncodeDataAccountStruct(in DataAccount) ([]byte, error) {
	return in.Marshal()
}

func (c *DataStorage) WriteReportFromDataAccount(
	runtime cre.Runtime,
	input DataAccount,
	accountList []solanago.PublicKey,
) cre.Promise[*solana.WriteReportReply] {
	encodedInput, err := c.Codec.EncodeDataAccountStruct(input)
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}

	encodedAccountList, err := EncodeAccountList(accountList)
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}

	fwdReport := ForwarderReport{
		AccountHash: encodedAccountList,
		Payload:     encodedInput,
	}

	encodedFwdReport, err := fwdReport.Marshal()
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}
	promise := runtime.GenerateReport(&sdk.ReportRequest{
		EncodedPayload: encodedFwdReport,
		EncoderName:    "solana",
		HashingAlgo:    "sha256",
		SigningAlgo:    "ed25519",
	})

	typedAccountList := make([]solana.PublicKey, len(accountList))
	for i, account := range accountList {
		typedAccountList[i] = solana.PublicKey(account)
	}
	return cre.ThenPromise(promise, func(report *cre.Report) cre.Promise[*solana.WriteReportReply] {
		return c.client.WriteReport(runtime, &solana.WriteCreReportRequest{
			AccountList: typedAccountList,
			Receiver:    ProgramID.Bytes(),
			Report:      report,
		})
	})
}

type DynamicEvent struct {
	Key           string   `json:"key"`
	UserData      UserData `json:"user_data"`
	Sender        string   `json:"sender"`
	Metadata      []byte   `json:"metadata"`
	MetadataArray [][]byte `json:"metadata_array"`
}

func (obj DynamicEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Key`:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return errors.NewField("Key", err)
	}
	// Serialize `UserData`:
	err = encoder.Encode(obj.UserData)
	if err != nil {
		return errors.NewField("UserData", err)
	}
	// Serialize `Sender`:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return errors.NewField("Sender", err)
	}
	// Serialize `Metadata`:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return errors.NewField("Metadata", err)
	}
	// Serialize `MetadataArray`:
	err = encoder.Encode(obj.MetadataArray)
	if err != nil {
		return errors.NewField("MetadataArray", err)
	}
	return nil
}

func (obj DynamicEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DynamicEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DynamicEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return errors.NewField("Key", err)
	}
	// Deserialize `UserData`:
	err = decoder.Decode(&obj.UserData)
	if err != nil {
		return errors.NewField("UserData", err)
	}
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return errors.NewField("Sender", err)
	}
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return errors.NewField("Metadata", err)
	}
	// Deserialize `MetadataArray`:
	err = decoder.Decode(&obj.MetadataArray)
	if err != nil {
		return errors.NewField("MetadataArray", err)
	}
	return nil
}

func (obj *DynamicEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DynamicEvent: %w", err)
	}
	return nil
}

func UnmarshalDynamicEvent(buf []byte) (*DynamicEvent, error) {
	obj := new(DynamicEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *Codec) EncodeDynamicEventStruct(in DynamicEvent) ([]byte, error) {
	return in.Marshal()
}

func (c *DataStorage) WriteReportFromDynamicEvent(
	runtime cre.Runtime,
	input DynamicEvent,
	accountList []solanago.PublicKey,
) cre.Promise[*solana.WriteReportReply] {
	encodedInput, err := c.Codec.EncodeDynamicEventStruct(input)
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}

	encodedAccountList, err := EncodeAccountList(accountList)
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}

	fwdReport := ForwarderReport{
		AccountHash: encodedAccountList,
		Payload:     encodedInput,
	}

	encodedFwdReport, err := fwdReport.Marshal()
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}
	promise := runtime.GenerateReport(&sdk.ReportRequest{
		EncodedPayload: encodedFwdReport,
		EncoderName:    "solana",
		HashingAlgo:    "sha256",
		SigningAlgo:    "ed25519",
	})

	typedAccountList := make([]solana.PublicKey, len(accountList))
	for i, account := range accountList {
		typedAccountList[i] = solana.PublicKey(account)
	}
	return cre.ThenPromise(promise, func(report *cre.Report) cre.Promise[*solana.WriteReportReply] {
		return c.client.WriteReport(runtime, &solana.WriteCreReportRequest{
			AccountList: typedAccountList,
			Receiver:    ProgramID.Bytes(),
			Report:      report,
		})
	})
}

type NoFields struct{}

func (obj NoFields) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj NoFields) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding NoFields: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *NoFields) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *NoFields) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling NoFields: %w", err)
	}
	return nil
}

func UnmarshalNoFields(buf []byte) (*NoFields, error) {
	obj := new(NoFields)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *Codec) EncodeNoFieldsStruct(in NoFields) ([]byte, error) {
	return in.Marshal()
}

func (c *DataStorage) WriteReportFromNoFields(
	runtime cre.Runtime,
	input NoFields,
	accountList []solanago.PublicKey,
) cre.Promise[*solana.WriteReportReply] {
	encodedInput, err := c.Codec.EncodeNoFieldsStruct(input)
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}

	encodedAccountList, err := EncodeAccountList(accountList)
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}

	fwdReport := ForwarderReport{
		AccountHash: encodedAccountList,
		Payload:     encodedInput,
	}

	encodedFwdReport, err := fwdReport.Marshal()
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}
	promise := runtime.GenerateReport(&sdk.ReportRequest{
		EncodedPayload: encodedFwdReport,
		EncoderName:    "solana",
		HashingAlgo:    "sha256",
		SigningAlgo:    "ed25519",
	})

	typedAccountList := make([]solana.PublicKey, len(accountList))
	for i, account := range accountList {
		typedAccountList[i] = solana.PublicKey(account)
	}
	return cre.ThenPromise(promise, func(report *cre.Report) cre.Promise[*solana.WriteReportReply] {
		return c.client.WriteReport(runtime, &solana.WriteCreReportRequest{
			AccountList: typedAccountList,
			Receiver:    ProgramID.Bytes(),
			Report:      report,
		})
	})
}

type UpdateReserves struct {
	TotalMinted  uint64 `json:"total_minted"`
	TotalReserve uint64 `json:"total_reserve"`
}

func (obj UpdateReserves) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TotalMinted`:
	err = encoder.Encode(obj.TotalMinted)
	if err != nil {
		return errors.NewField("TotalMinted", err)
	}
	// Serialize `TotalReserve`:
	err = encoder.Encode(obj.TotalReserve)
	if err != nil {
		return errors.NewField("TotalReserve", err)
	}
	return nil
}

func (obj UpdateReserves) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UpdateReserves: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UpdateReserves) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TotalMinted`:
	err = decoder.Decode(&obj.TotalMinted)
	if err != nil {
		return errors.NewField("TotalMinted", err)
	}
	// Deserialize `TotalReserve`:
	err = decoder.Decode(&obj.TotalReserve)
	if err != nil {
		return errors.NewField("TotalReserve", err)
	}
	return nil
}

func (obj *UpdateReserves) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UpdateReserves: %w", err)
	}
	return nil
}

func UnmarshalUpdateReserves(buf []byte) (*UpdateReserves, error) {
	obj := new(UpdateReserves)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *Codec) EncodeUpdateReservesStruct(in UpdateReserves) ([]byte, error) {
	return in.Marshal()
}

func (c *DataStorage) WriteReportFromUpdateReserves(
	runtime cre.Runtime,
	input UpdateReserves,
	accountList []solanago.PublicKey,
) cre.Promise[*solana.WriteReportReply] {
	encodedInput, err := c.Codec.EncodeUpdateReservesStruct(input)
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}

	encodedAccountList, err := EncodeAccountList(accountList)
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}

	fwdReport := ForwarderReport{
		AccountHash: encodedAccountList,
		Payload:     encodedInput,
	}

	encodedFwdReport, err := fwdReport.Marshal()
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}
	promise := runtime.GenerateReport(&sdk.ReportRequest{
		EncodedPayload: encodedFwdReport,
		EncoderName:    "solana",
		HashingAlgo:    "sha256",
		SigningAlgo:    "ed25519",
	})

	typedAccountList := make([]solana.PublicKey, len(accountList))
	for i, account := range accountList {
		typedAccountList[i] = solana.PublicKey(account)
	}
	return cre.ThenPromise(promise, func(report *cre.Report) cre.Promise[*solana.WriteReportReply] {
		return c.client.WriteReport(runtime, &solana.WriteCreReportRequest{
			AccountList: typedAccountList,
			Receiver:    ProgramID.Bytes(),
			Report:      report,
		})
	})
}

type UserData struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (obj UserData) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Key`:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return errors.NewField("Key", err)
	}
	// Serialize `Value`:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj UserData) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UserData: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UserData) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return errors.NewField("Key", err)
	}
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj *UserData) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UserData: %w", err)
	}
	return nil
}

func UnmarshalUserData(buf []byte) (*UserData, error) {
	obj := new(UserData)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *Codec) EncodeUserDataStruct(in UserData) ([]byte, error) {
	return in.Marshal()
}

func (c *DataStorage) WriteReportFromUserData(
	runtime cre.Runtime,
	input UserData,
	accountList []solanago.PublicKey,
) cre.Promise[*solana.WriteReportReply] {
	encodedInput, err := c.Codec.EncodeUserDataStruct(input)
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}

	encodedAccountList, err := EncodeAccountList(accountList)
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}

	fwdReport := ForwarderReport{
		AccountHash: encodedAccountList,
		Payload:     encodedInput,
	}

	encodedFwdReport, err := fwdReport.Marshal()
	if err != nil {
		return cre.PromiseFromResult[*solana.WriteReportReply](nil, err)
	}
	promise := runtime.GenerateReport(&sdk.ReportRequest{
		EncodedPayload: encodedFwdReport,
		EncoderName:    "solana",
		HashingAlgo:    "sha256",
		SigningAlgo:    "ed25519",
	})

	typedAccountList := make([]solana.PublicKey, len(accountList))
	for i, account := range accountList {
		typedAccountList[i] = solana.PublicKey(account)
	}
	return cre.ThenPromise(promise, func(report *cre.Report) cre.Promise[*solana.WriteReportReply] {
		return c.client.WriteReport(runtime, &solana.WriteCreReportRequest{
			AccountList: typedAccountList,
			Receiver:    ProgramID.Bytes(),
			Report:      report,
		})
	})
}
